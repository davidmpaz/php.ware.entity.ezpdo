«IMPORT php::ware::entity»
«IMPORT php::ware::config»`

«EXTENSION php::ware::entity::extensions::Extensions»
«EXTENSION php::ware::entity::extensions::Entity»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE bean FOR Entity-»

«FILE this.name + "DaoBase.php" toModelDir -»
<?php
    «EXPAND Common::generatedFileComment("php::ware::entity::templates::Entity.xpt") FOR this»
    «EXPAND daoBeanException FOR this»
    «EXPAND daoBean FOR this»
    «EXPAND daoBeanBase FOR this»
«ENDFILE»

«FILE this.name + "Dao.php" toModelImplDir -»
<?php
    «EXPAND Common::handEditFileComment FOR this»
    «EXPAND daoBeanImpl FOR this»
    «IF this.generateFactory()-»
        «EXPAND daoBeanFactory FOR this»
    «ENDIF»
«ENDFILE»

«FILE getEntitiesDir() + "/" + getBaseDirName() + "/" + this.name + "Base.php" toModelDir -»
<?php
    «EXPAND Common::generatedFileComment("php::ware::entity::templates::Entity.xpt") FOR this»
    «EXPAND beanException FOR this»
    «EXPAND beanBase FOR this»
«ENDFILE»

«FILE getEntitiesDir() + "/" + this.name + ".php" toModelImplDir -»
<?php
    «EXPAND Common::handEditFileComment FOR this»
    «EXPAND beanImpl FOR this»
    «IF this.generateFactory()-»
        «EXPAND beanFactory FOR this»
    «ENDIF»
«ENDFILE»

«ENDDEFINE»

«DEFINE daoBeanException FOR Entity»
    /**
     * Exception for «getName()»Dao
     */
    class «getName()»DaoException extends Exception{}
«ENDDEFINE»

«DEFINE daoBean FOR Entity -»
    /**
     * Contract definition for DAO classes
     */
    interface «getName()»Dao
    {
        /**
         * Loads an instance of {@link «getName()»} from the persistent store.
         * 
         * @param int $«getName().toFirstLower()»Id
         * @return «getName()»|epObject entity loaded from database
         */
        public function load($«getName().toFirstLower()»Id);

        /**
         * Loads an instance of {@link «getName()»} from the persistent store using 
         * a criteria sample object or an array.
         * @param $«getName()»|array the criteria object
         * @return «getName()»|epObject|array of entities loaded from database
         */
        public function loadByCriteria($criteria);

        /**
         * Loads all entities of type {@link «getName()»}.
         *
         * @return «getName()»|epObject|array the loaded entities.
         */
        public function loadAll();

        /**
         * Creates an empty instance of {@link «getName()»} and adds it 
         * to the persistent store.
         *
         * @return «getName()»|epObject the epObject wrapper of the entity created.
         */
        public function create();

        /**
         * Creates an instance of {@link «getName()»} from a dictionary 
         * or object of type «getName()» and adds it to the persistent store.
         *
         * @param «getName()»|array $«getName().toLowerCase()» object of type «getName()» or dictionary containing all attributes pairs, name & values
         * @return «getName()»|epObject the epObject wrapper of the entity created.
         */
        public function createFrom($«getName().toLowerCase()»);

        /**
         * Creates a new instances of {@link «getName()»}s and adds
         * from the passed in <code>«getName().toLowerCase()»s</code> collection
         *
         * @param «getName()» $«getName().toLowerCase()»s the collection of «getName()» instances or with dictionaries, can be combined.
         * @return «getName()»|epObject|array the created collection of epObject instances.
         */
        public function createAll($«getName().toLowerCase()»s);

        /**
         * <p>
         * Creates a new {@link «getName()»} instance from <strong>all</strong> 
         * attributes and adds it to the persistent store.
         * </p>
         *
         * @return «getName()»|epObject  the entity created.
         */
        public function createWith(«FOREACH getAllFeatures() AS p SEPARATOR ", " -»$«p.name.toFirstLower()» = null«ENDFOREACH»);

        /**
         * Updates the <code>«getName().toLowerCase()»</code> 
         * instance in the persistent store.
         *
         * @param «getName()»|array $«getName().toLowerCase()» epObject wrapper for entity to update or dictionary
         * @return boolean Whether the entity was updated or not 
         */ 
        public function update($«getName().toLowerCase()»);

        /**
         * Updates all instances in <code>«getName().toLowerCase()»s</code> collection
         * into the persistent store.
         *
         * @param array $«getName().toLowerCase()»s Collection of entities or dictionary to update, can be combined
         */
        public function updateAll($«getName().toLowerCase()»s);

        /**
         * Updates the {@link «getName()»} instance in the persistent store
         * with the specified ID and the data paased
         *
         * @param int $«getName().toLowerCase()»Id Object Id of the entity to update
         * @param «getName()»|array $«getName().toLowerCase()» Object representation or array of data to update
         * @return boolean Whether the entity was updated or not
         */
        public function updateWith($«getName().toLowerCase()»Id, $«getName().toLowerCase()»);

        /**
         * Updates the {@link «getName()»} instance from the persistent store.
         * Refreshing the in memory object with the stored data
         * 
         * @param «getName()» Entity to refresh, in memory object fields are refreshed with ones in datastore
         * @return boolean whether object was refreshed or not 
         */
        public function refresh($«getName().toLowerCase()»);

        /**
         * Removes the instance of {@link «getName()»} having the given
         * <code>identifier</code> from the persistent store.
         *
         * @param int $«getName().toLowerCase()» Id Object Id of entity to delete in data store
         * @return boolean Whether the entity object was deleted or not.
         */
        public function removeWith($«getName().toLowerCase()»Id);

        /**
         * Removes the instance of {@link «getName()»} from the persistent store.
         *
         * @param «getName()»|epObject $«getName().toLowerCase()» epObject entity to delete
         * @return boolean Whether entity was deleted or not.
         */
        public function remove($«getName().toLowerCase()»);

        /**
         * Removes all entities in the given 
         * <code>«getName().toLowerCase()»s<code> collection.
         *
         * @param array $«getName().toLowerCase()»s Collection of entities to delete.
         */
        public function removeAll($«getName().toLowerCase()»s);

    }

«ENDDEFINE»

«DEFINE daoBeanBase FOR Entity»
    include_once 'epManagerFactory.php';

    /**
     * <p>
     * Base DAO Class: is able to create, update, remove, load, and find
     * objects of type <code>{@link «getName()»}</code>.
     * </p>
     *
     */
    abstract class «getName()»DaoBase implements «getName()»Dao
    {

        /**
         * @see «getName()»Dao::load
         */
        public function load($id)
        {
            if (! isset($id))
            {
                throw new «getName()»DaoException("Method {«getName()»Dao.load}: Parameter <id> can not be null.");
            }
            //get the persistence manager
            $manager = epManagerFactory::getManagerInstance();
            $result = $manager->find("from «getName()» as «getName().toUpperCase()» where «getName().toUpperCase()».oid = ?", $id);
            empty($result) ? $result : $result[0]; //Object Found.
        }

        /**
         * @see «getName()»Dao::loadAll
         */
        public function loadAll()
        {
            // get the persistence manager
            $manager = epManagerFactory::getManagerInstance();
            return $manager->get('«getName()»');
        }

        /**
         * @see «getName()»Dao::loadByCriteria
         */
        public function loadByCriteria($entity)
        {
            if (! isset($entity))
            {
                throw new «getName()»DaoException("Method {«getName()»Dao.loadByCriteria}: Parameter <criteria> can not be null.");
            }
            // get the persistence manager
            $manager = epManagerFactory::getManagerInstance();
            $result = null;
            if ( is_array($entity) )
            {
                $result = $manager->find("from «getName()» as «getName().toUpperCase()» where «getName().toUpperCase()» = ? ", $entity);
            }
            else
            {
                $criteria = $manager->create('«getName()»');
                foreach( array_keys(get_class_vars('«getName()»')) as $property)
                {
                    $criteria->$property = $entity->$property;
                }
                $result = $manager->find($criteria);
            }
            return $result;
        }

        /**
         * @see «getName()»Dao::create
         */
        public function create()
        {
            // get the persistence manager
            $manager = epManagerFactory::getManagerInstance();
            return $manager->create('«getName()»');
        }

        /**
         * @see «getName()»Dao::createFrom
         */
        public function createFrom($entity)
        {
            if (! isset($entity))
            {
                throw new «getName()»DaoException("Method {«getName()»Dao.createFrom}: Parameter <entity> can not be null.");
            }
            // get the persistence manager
            $manager = epManagerFactory::getManagerInstance();
            $result = $manager->create('«getName()»');
            if( is_array($entity) )
            {
                foreach( $entity as $propName => $propValue)
                {
                    $result[$propName] = $propValue;
                }
            }
            else
            {
                foreach( array_keys(get_class_vars('«getName()»')) as $property)
                {
                    $result->$property = $entity->$property;
                }
            }
            $manager->commit($result);
            return $result;
        }

        /**
         * @see «getName()»Dao::createAll
         */
        public function createAll($entities)
        {
            if (! isset($entities))
            {
                throw new «getName()»DaoException("Method {«getName()»Dao.createAll}: Parameter <entities> can not be null.");
            }
            // get the persistence manager
            $manager = epManagerFactory::getManagerInstance();
            $result_collection = array();
            foreach ($entities as $entity)
            {
                $result_collection[] = $this->createFrom($entity);
            }
            return $result_collection;
        }

        /**
         * @see «getName()»Dao::createWith
         */
        public function createWith(«FOREACH getAllFeatures() AS p SEPARATOR ", " -»$«name.toFirstLower()» = null«ENDFOREACH»)
        {
            $entityArray = compact(
            «FOREACH getAllFeatures() AS f SEPARATOR ", " -»
                '«f.name.toFirstLower()-»'
            «ENDFOREACH-»
            );
            return $this->createFrom($entityArray);
        }

        /**
         * @see «getName()»Dao::update
         */
        public function update($entity)
        {
            if (! isset($entity))
            {
                throw new «getName()»DaoException("Method {«getName()»Dao.update}: Parameter <entity> can not be null.");
            }
            // get the persistence manager
            $manager = epManagerFactory::getManagerInstance();
            //force commit
            $result = $manager->commit($entity, true);
            if(! $result) throw new «getName()»DaoException(
                "Method {«getName()»Dao.update}: Uncommitable entity object", -1);
            return true;
        }

        /**
         * @see «getName()»Dao::updateAll
         */
        public function updateAll($entities)
        {
            if (! isset($entities) || empty($entities))
            {
                throw new «getName()»DaoException("Method {«getName()»Dao.updateAll}: Parameter <entities> can not be null.");
            }
            // get the persistence manager
            $manager = epManagerFactory::getManagerInstance();
            foreach($entities as $entity)
            {
                $updated = null;
                if( is_array($entity) )
                {
                    $«getEntityIdName()» = $entity['«getEntityIdName()»'];
                    unset($entity['«getEntityIdName()»']);
                    $updated = $this->updateWith($«getEntityIdName()», $entity);
                }
                else $updated = $this->update($entity);

                if(! $updated) throw new «getName()»DaoException(
                    "Method {«getName()»Dao.updateAll}: Uncommitable entity object when updating collection.", -1
                );  
            }
        }

        /**
         * @see «getName()»Dao::updateWith
         */
        public function updateWith($id, $entity)
        {
            if (! isset($entity))
            {
                throw new «getName()»DaoException("Method {«getName()»Dao.update}: Parameter <entity> can not be null.");
            }
            $loadedEntity = $this->load($id);
            if( $loadedEntity )
            {
                if( is_array($entity) )
                {
                    foreach( $entity as $propertyName => $propertyValue )
                    {
                        $loadedEntity->$propertyName = $propertyValue;
                    }
                }
                else
                {
                    foreach( array_keys(get_class_vars('«getName()»')) as $property)
                    {
                        $loadedEntity->$property = $entity->$property;
                    }
                }
            }
            else throw new «getName()»DaoException(
                "Method {«getName()»Dao::updateWith}: Entity object with <id> = $id, not found for updating", -1);
            // get the persistence manager
            $manager = epManagerFactory::getManagerInstance();
            return $manager->commit($loadedEntity);
        }

        /**
         * @see «getName()»Dao::refresh
         */
        public function refresh($entity)
        {
            if (! isset($entity))
            {
                throw new «getName()»DaoException("Method {«getName()»Dao.refresh}: Parameter <entity> can not be null.");
            }
            // get the persistence manager
            $manager = epManagerFactory::getManagerInstance();
            return $manager->refresh($entity);
        }

        /**
         * @see «getName()»Dao::removeWith
         */
        public function removeWith($id)
        {
            if (! isset($id))
            {
                throw new «getName()»DaoException("Method {«getName()»Dao.removeWith}: Parameter <id> can not be null.");
            }
            // get the persistence manager
            $manager = epManagerFactory::getManagerInstance();
            $result = $manager->find("from «getName()» as «getName().toUpperCase()» where «getName().toUpperCase()».oid = ?", $id);
            return empty($result) ? false : $manager->delete($result[0]);
        }

        /**
         * @see «getName()»Dao::remove
         */
        public function remove($entity)
        {
            if (! isset($entity))
            {
                throw new «getName()»DaoException("Method {«getName()»Dao.remove}: Parameter <entity> can not be null.");
            }
            // get the persistence manager
            $manager = epManagerFactory::getManagerInstance();
            return $manager->delete($entity);
        }

        /**
         * @see «getName()»Dao::removeAll
         */
        public function removeAll($entities)
        {
            if (! isset($entities))
            {
                throw new «getName()»DaoException("Method {«getName()»Dao.removeAll}: Parameter <entities> can not be null.");
            }
            // get the persistence manager
            $manager = epManagerFactory::getManagerInstance();
            foreach($entities as $entity)
            {
                $manager->delete($entity);
            }
        }
    }

«ENDDEFINE»

«DEFINE daoBeanImpl FOR Entity-»    
    include_once(dirname(__FILE__)."/«getName()»DaoBase.php");

    /**
     *
     */
    class «getName()»Dao extends «IF isDirectIherited()»«getSuperType().getName()»Dao«ELSE»«getName()»DaoBase«ENDIF»
    {
        //Override here any behaviour from the dao base class
        //Or just implement additional stuff

    }    
«ENDDEFINE»

«DEFINE daoBeanFactory FOR Entity»
    /**
     * Factory for this DAO
     */
    class «getName()»DaoFactory{
    
        /**
         * Make instances of {@link«getName()»Dao}
         *
         * @return «getName()»Dao
         */
        public static function makeInstance(){
            return new «getName()»Dao();
        }
    }
«ENDDEFINE»

«DEFINE beanException FOR Entity»
    /**
     * Exception for «getName()» entity
     */
    class «getName()»Exception extends Exception{}
«ENDDEFINE»

«DEFINE beanBase FOR Entity»

    /**
     *
     */
    «IF this.isAbstract()»abstract «ENDIF»class «getName()»Base «IF this.hasSuperType()»extends «superType.getName()» «ENDIF»
    {
        «FOREACH getFeatures() AS f-»
            «EXPAND Field::mapField FOR f»
        «ENDFOREACH-»

        «EXPAND constructor FOR this»

    }
«ENDDEFINE»

«DEFINE beanImpl FOR Entity-»    
    include_once(dirname(__FILE__)."/«getBaseDirName()»/«getName()»Base.php");

    /**
     *
     */
    class «getName()» extends «IF isDirectIherited()»«getSuperType().getName()»«ELSE»«getName()»Base«ENDIF»
    {
        /**
         * Constructor
         */ 
        public function __construct(«FOREACH getAllFeatures() AS f SEPARATOR ", " -»$«f.name» = null«ENDFOREACH»)
        {
            parent::__construct(«FOREACH getAllFeatures() AS f SEPARATOR ", " -»$«f.name»«ENDFOREACH»);
        }

    }
«ENDDEFINE»

«DEFINE beanFactory FOR Entity»
    /**
     * Factory for this entity
     */
    class «getName()»Factory{
    
        /**
         * Make instances of {@link«getName()»}
         *
         * @return «getName()»
         */
        public static function makeInstance(){
            return new «getName()»();
        }
    }
«ENDDEFINE»

«DEFINE constructor FOR Entity»
        /**
         * Constructor
         */
        public function __construct(«FOREACH getAllFeatures() AS f SEPARATOR ", " -»$«f.name» = null«ENDFOREACH»)
        {
            «IF hasSuperType()»
                parent::__construct(«FOREACH this.getSuperType().getAllFeatures() AS f SEPARATOR ", " -»$«f.name»«ENDFOREACH»);
            «ENDIF-»

            «FOREACH getFeatures() AS f-»
                $this->«f.name» = $«f.name»;
            «ENDFOREACH-»
        }
«ENDDEFINE»